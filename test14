import { Injectable, signal, computed } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { TransferDto, TransferResponse } from './transfer.model';

@Injectable({ providedIn: 'root' })
export class TransferService {
  private readonly apiUrl = '/api/virements/filtre';

  // Signaux privés modifiables
  private readonly _transfers = signal<TransferDto[]>([]);
  private readonly _total = signal(0);
  private readonly _loading = signal(false);

  // Signaux publics en lecture seule
  readonly transfers = this._transfers.asReadonly();
  readonly total = this._total.asReadonly();
  readonly loading = this._loading.asReadonly();

  constructor(private http: HttpClient) {}

  loadPage(params: {
    keyword: string;
    pageIndex: number;
    pageSize: number;
    triSens: 'asc' | 'desc';
  }): void {
    this._loading.set(true);

    this.http.post<TransferResponse>(this.apiUrl, {
      keyword: params.keyword,
      pageIndex: params.pageIndex,
      pageSize: params.pageSize,
      triSens: params.triSens
    }).subscribe({
      next: res => {
        const updatedList = params.pageIndex === 0
          ? res.items
          : [...this._transfers(), ...res.items];

        this._transfers.set(updatedList);
        this._total.set(res.totalCount);
      },
      error: () => console.error('Erreur de chargement des virements'),
      complete: () => this._loading.set(false)
    });
  }
}



@Component({
  selector: 'app-transfer-list',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <input
      type="text"
      [(ngModel)]="searchText"
      (ngModelChange)="onSearchChange()"
      placeholder="Recherche..."
    />

    <select [(ngModel)]="triSens" (change)="onSearchChange()">
      <option value="desc">Plus récent</option>
      <option value="asc">Plus ancien</option>
    </select>

    <div *ngIf="loading()">Chargement...</div>

    <table *ngIf="transfers().length > 0">
      <thead>
        <tr>
          <th>IBAN</th>
          <th>Bénéficiaire</th>
          <th>Montant</th>
          <th>Type de compte</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let v of transfers()">
          <td>{{ v.iban }}</td>
          <td>{{ v.beneficiaryOwner }}</td>
          <td>{{ v.amountDebit | number:'1.2-2' }} {{ v.currency }}</td>
          <td>{{ v.accountType }}</td>
        </tr>
      </tbody>
    </table>

    <button *ngIf="hasMore()" (click)="loadMore()">Charger plus</button>
  `
})
export class TransferListComponent {
  readonly transfers = this.service.transfers;
  readonly total = this.service.total;
  readonly loading = this.service.loading;

  searchText = '';
  triSens: 'asc' | 'desc' = 'desc';
  pageIndex = 0;
  readonly pageSize = 20;

  constructor(private service: TransferService) {
    this.loadPage();
  }

  onSearchChange(): void {
    this.pageIndex = 0;
    this.loadPage();
  }

  loadMore(): void {
    this.pageIndex++;
    this.loadPage();
  }

  loadPage(): void {
    this.service.loadPage({
      keyword: this.searchText,
      pageIndex: this.pageIndex,
      pageSize: this.pageSize,
      triSens: this.triSens
    });
  }

  hasMore(): boolean {
    return this.total() > (this.pageIndex + 1) * this.pageSize;
  }
}



@Injectable({ providedIn: 'root' })
export class TransferService {
  private readonly apiUrl = '/api/virements/filtre';

  readonly transfers = signal<TransferDto[]>([]);
  readonly total = signal(0);
  readonly loading = signal(false);

  loadPage(params: {
    keyword: string;
    pageIndex: number;
    pageSize: number;
    triSens: 'asc' | 'desc';
  }): void {
    this.loading.set(true);

    const body = {
      keyword: params.keyword,
      pageIndex: params.pageIndex,
      pageSize: params.pageSize,
      triSens: params.triSens
    };

    this.http.post<TransferResponse>(this.apiUrl, body).subscribe({
      next: res => {
        this.transfers.update(list =>
          params.pageIndex === 0 ? res.items : [...list, ...res.items]
        );
        this.total.set(res.totalCount);
      },
      error: () => console.error('Erreur chargement'),
      complete: () => this.loading.set(false)
    });
  }

  constructor(private http: HttpClient) {}
}
import { Injectable, signal, computed, Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';

// === MODELES ===

export interface TransferDto {
  id: string;
  debitAccountNumber: string;
  beneficiaryOwner: string;
  iban: string;
  labelIssuer: string;
  amountDebit: number;
  currency: string;
  createdAt: string;
  accountType: string;
}

export interface TransferFilter {
  keyword?: string;
}

export interface TransferResponse {
  items: TransferDto[];
  totalCount: number;
}

// === SERVICE SIGNAL ===

@Injectable({ providedIn: 'root' })
export class TransferService {
  private readonly apiUrl = '/api/virements/filtre';

  readonly transfers = signal<TransferDto[]>([]);
  readonly total = signal(0);
  readonly pageSize = 20;
  readonly pageIndex = signal(0);
  readonly loading = signal(false);

  readonly hasMore = computed(() =>
    this.total() > (this.pageIndex() + 1) * this.pageSize
  );

  constructor(private http: HttpClient) {}

  loadInitial(filter: TransferFilter): void {
    this.transfers.set([]);
    this.pageIndex.set(0);
    this.total.set(0);
    this.loadPage(filter);
  }

  loadMore(filter: TransferFilter): void {
    this.pageIndex.update(i => i + 1);
    this.loadPage(filter);
  }

  private loadPage(filter: TransferFilter): void {
    this.loading.set(true);

    const body = {
      ...filter,
      pageIndex: this.pageIndex(),
      pageSize: this.pageSize,
      triSens: 'desc'
    };

    this.http.post<TransferResponse>(this.apiUrl, body).subscribe({
      next: res => {
        this.transfers.update(list => [...list, ...res.items]);
        this.total.set(res.totalCount);
      },
      error: () => console.error('Erreur de chargement'),
      complete: () => this.loading.set(false)
    });
  }
}

// === COMPOSANT D'AFFICHAGE (STANDALONE) ===

@Component({
  selector: 'app-transfer-list',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div *ngIf="loading()">Chargement...</div>

    <table *ngIf="transfers().length > 0">
      <thead>
        <tr>
          <th>IBAN</th>
          <th>Bénéficiaire</th>
          <th>Montant</th>
          <th>Type de compte</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let v of transfers()">
          <td>{{ v.iban }}</td>
          <td>{{ v.beneficiaryOwner }}</td>
          <td>{{ v.amountDebit | number:'1.2-2' }} {{ v.currency }}</td>
          <td>{{ v.accountType }}</td>
        </tr>
      </tbody>
    </table>

    <button *ngIf="hasMore()" (click)="loadMore()">Charger plus</button>
  `
})
export class TransferListComponent {
  readonly transfers = this.service.transfers;
  readonly hasMore = this.service.hasMore;
  readonly loading = this.service.loading;

  constructor(private service: TransferService) {
    this.service.loadInitial({ keyword: '' });
  }

  loadMore(): void {
    this.service.loadMore({ keyword: '' });
  }
}
