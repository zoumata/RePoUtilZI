public static class AccountRulesHelper
{
    /// <summary>
    /// Returns a short formatted label for the account type.
    /// </summary>
    /// <param name="natureId">The account nature ID</param>
    /// <param name="nature">The nature label</param>
    /// <param name="managementOrientation">The management orientation</param>
    /// <param name="managementType">The management type</param>
    /// <returns>A formatted string representing the account type</returns>
    public static string GetAccountType(string natureId, string nature, string managementOrientation, string managementType)
    {
        // Early return if not advisory
        if (!string.Equals(managementType, "ADVISORY", StringComparison.OrdinalIgnoreCase))
            return nature;

        // Check if the nature requires orientation
        var requiresOrientation = natureId is "PORTFOLIO" or "CASHPORTFOLIO" or "CASHACCOUNT";
        if (!requiresOrientation)
            return nature;

        // Append orientation if available
        return string.IsNullOrWhiteSpace(managementOrientation)
            ? nature
            : $"{nature} - \"{managementOrientation}\"";
    }
}



using MediatR;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System;
using System.Collections.Generic;
using eBanking.Domain.Models;

public static class UserTransferMock
{
    public static List<UserTransfer> GenerateSampleTransfers(int count = 10)
    {
        var list = new List<UserTransfer>();

        for (int i = 1; i <= count; i++)
        {
            list.Add(new UserTransfer
            {
                IdExterne = $"EXT{i:D5}",
                DebitAccountNumber = $"DZ100000{i:D4}",
                AccountNumberShort = $"000{i:D4}",
                AccountOwner = $"Client {i}",
                TypeCompte = "Epargne",
                Purpose = "Salaire",
                Currency = "DZD",
                DateEntry = DateTime.UtcNow.AddDays(-i),
                DateValuation = DateTime.UtcNow.AddDays(-i + 1),
                AmountDebit = 1000 + i * 100,
                IsDeletable = i % 2 == 0,
                IBAN = $"DZ100000000000000000{i:D4}",
                BeneficiaryBank = $"BANQUE {i}",
                IdStatut = i % 4 + 1,
                IdBeneficiary = i,
                BeneficiaryOwner = $"Bénéficiaire {i}",
                IdTypeVirement = i % 3 + 1,
                LabelIssuer = $"Entreprise {i}",
                User = new User
                {
                    Id = i,
                    Login = $"user{i}",
                    FullName = $"Utilisateur {i}"
                }
            });
        }

        return list;
    }
}
public record GetUserTransfersQuery(TransferHistoryFilterDto Filtre) : IRequest<PagedResult<UserTransferDto>>;

public class GetUserTransfersQueryHandler : IRequestHandler<GetUserTransfersQuery, PagedResult<UserTransferDto>>
{
    private readonly TransferRepository _repository;

    public GetUserTransfersQueryHandler(TransferRepository repository)
    {
        _repository = repository;
    }

    public async Task<PagedResult<UserTransferDto>> Handle(GetUserTransfersQuery request, CancellationToken cancellationToken)
    {
        var (transfers, total) = await _repository.GetPagedAsync(request.Filtre);

        var dtos = transfers.Select(v => new UserTransferDto
        {
            Id = v.Id,
            DebitAccountNumber = v.DebitAccountNumber,
            BeneficiaryOwner = v.BeneficiaryOwner,
            IBAN = v.IBAN,
            LabelIssuer = v.LabelIssuer,
            AmountDebit = v.AmountDebit,
            Devise = v.Devise,
            DateCreation = v.DateEntry
        }).ToList();

        return new PagedResult<UserTransferDto>(dtos, total);
    }
}
