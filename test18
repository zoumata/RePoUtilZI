import { Component, signal, computed, effect } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TransferService } from './services/transfer.service'; // à adapter selon ton arbo
import { TransferModel, SearchSortModel } from './models';
import { TransfersSearchComponent } from '../transfers-search/transfers-search.component';
import { TransfersListComponent } from '../transfers-list/transfers-list.component';
import { PagerComponent, PagerInfoModel } from '../pager/pager.component';

@Component({
  selector: 'transfer-history',
  standalone: true,
  imports: [CommonModule, TransfersSearchComponent, TransfersListComponent, PagerComponent],
  templateUrl: './transfer-history.component.html'
})
export class TransferHistoryComponent {
  // Signaux
  pageIndex = signal(0);
  pageSize = signal(10);
  triSens = signal<'asc' | 'desc'>('desc');
  keyword = signal('');
  total = signal(0);
  loading = signal(false);
  hasTransfersError = signal(false);
  confirmationMessage = signal('');

  // Liste de résultats
  transfers = signal<TransferModel[]>([]);

  // Tri
  searchSortOptions: SearchSortModel[] = [
    { code: 'desc', label: 'Du plus récent au plus ancien' },
    { code: 'asc', label: 'Du plus ancien au plus récent' }
  ];
  searchSortModel: SearchSortModel = this.searchSortOptions[0];

  constructor(private transferService: TransferService) {
    this.loadTransfers();
  }

  // Calcul de la pagination
  readonly pagerInfos = computed<PagerInfoModel>(() => ({
    isPrevEnabled: this.pageIndex() > 0,
    isNextEnabled: (this.pageIndex() + 1) * this.pageSize() < this.total(),
    nbResults: this.total(),
    index: this.pageIndex(),
    size: this.pageSize()
  }));

  loadTransfers(): void {
    this.loading.set(true);
    this.hasTransfersError.set(false);
    this.transferService.getHistoryTransfers({
      keyword: this.keyword(),
      pageIndex: this.pageIndex(),
      pageSize: this.pageSize(),
      triSens: this.triSens()
    }).then(result => {
      this.transfers.set(result.items);
      this.total.set(result.total);
      this.loading.set(false);
    }).catch(() => {
      this.hasTransfersError.set(true);
      this.transfers.set([]);
      this.loading.set(false);
    });
  }

  onSearch(model: { keyWords: string }) {
    this.keyword.set(model.keyWords);
    this.pageIndex.set(0);
    this.loadTransfers();
  }

  onReset() {
    this.keyword.set('');
    this.pageIndex.set(0);
    this.loadTransfers();
  }

  onSortChange(sort: SearchSortModel) {
    this.searchSortModel = sort;
    this.triSens.set(sort.code as 'asc' | 'desc');
    this.pageIndex.set(0);
    this.loadTransfers();
  }

  onPrev() {
    if (this.pageIndex() > 0) {
      this.pageIndex.update(v => v - 1);
      this.loadTransfers();
    }
  }

  onNext() {
    if (this.pagerInfos().isNextEnabled) {
      this.pageIndex.update(v => v + 1);
      this.loadTransfers();
    }
  }

  onDeleteConfirm(virementId: string) {
    // supprimer un virement
  }

  onDeleteEnd() {
    this.confirmationMessage.set("Virement annulé avec succès.");
    this.loadTransfers();
  }
}

<div class="content-block">

  <transfers-search
    [loading]="loading()"
    [searchSortOptions]="searchSortOptions"
    [searchSortModel]="searchSortModel"
    (onSearchEvent)="onSearch($event)"
    (onResetEvent)="onReset()"
    (onSortChangeEvent)="onSortChange($event)">
  </transfers-search>

  <message type="success" *ngIf="confirmationMessage()">{{ confirmationMessage() }}</message>
  <message type="error" *ngIf="hasTransfersError()">Les virements n’ont pas pu être chargés</message>

  <ng-container *ngIf="!hasTransfersError()">
    <transfers-list
      [transfers]="transfers()"
      [loading]="loading()"
      (onDeleteEvent)="onDeleteConfirm($event)">
    </transfers-list>

    <pager
      [infos]="pagerInfos()"
      [loading]="loading()"
      (onPrevEvent)="onPrev()"
      (onNextEvent)="onNext()">
    </pager>
  </ng-container>
</div>




import { Component, Input, Output, EventEmitter, signal, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

export interface SearchSortModel {
  code: string;
  label: string;
}

export interface TransferSearchFormModel {
  keyWords: string;
}

// =========================
// === PageSearchComponent
// =========================

@Component({
  selector: 'page-search',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="mt-2">
      <label class="form-label">Trier par</label>
      <select class="form-select"
              [ngModel]="selectedSort().code"
              (ngModelChange)="onSortChange($event)">
        <option *ngFor="let option of sortOptions()" [value]="option.code">
          {{ option.label }}
        </option>
      </select>
    </div>
  `
})
export class PageSearchComponent {
  @Input() set searchSortOptions(value: SearchSortModel[]) {
    this.sortOptions.set(value);
  }

  @Input() set searchSortModel(value: SearchSortModel) {
    this.selectedSort.set(value);
  }

  @Output() onSortChangeEvent = new EventEmitter<SearchSortModel>();

  sortOptions = signal<SearchSortModel[]>([]);
  selectedSort = signal<SearchSortModel>({ code: '', label: '' });

  onSortChange(code: string): void {
    const found = this.sortOptions().find(o => o.code === code);
    if (found) {
      this.selectedSort.set(found);
      this.onSortChangeEvent.emit(found);
    }
  }
}

// ==============================
// === TransferSearchComponent
// ==============================

@Component({
  selector: 'transfers-search',
  standalone: true,
  imports: [CommonModule, FormsModule, PageSearchComponent],
  template: `
    <page-search
      [searchSortOptions]="searchSortOptions"
      [searchSortModel]="searchSortModel"
      (onSortChangeEvent)="onSortChange($event)">
    </page-search>

    <div class="row mt-3">
      <div class="col-sm-6 col-md-4">
        <label class="form-label">Par mots-clés</label>
        <input
          type="text"
          class="form-control"
          [ngModel]="keyword()"
          (ngModelChange)="keyword.set($event)"
          [pattern]="allowedPattern"
          [ngClass]="{ 'is-invalid': isKeywordInvalid() }"
          placeholder="Mots-clés" />

        <div class="invalid-feedback" *ngIf="isKeywordInvalid()">
          Caractères spéciaux non autorisés
        </div>
      </div>

      <div class="col-sm-6 col-md-4 d-flex align-items-end gap-2">
        <button class="btn btn-primary btn-sm"
                [disabled]="isKeywordInvalid() || loading"
                (click)="emitSearch()">Lancer</button>

        <button class="btn btn-outline-secondary btn-sm"
                [disabled]="loading"
                (click)="reset()">✖</button>
      </div>
    </div>
  `
})
export class TransferSearchComponent {
  @Input() loading = false;
  @Input() searchSortOptions: SearchSortModel[] = [];
  @Input() searchSortModel!: SearchSortModel;

  @Output() onSearchEvent = new EventEmitter<TransferSearchFormModel>();
  @Output() onResetEvent = new EventEmitter<void>();
  @Output() onSortChangeEvent = new EventEmitter<SearchSortModel>();

  keyword = signal('');
  readonly allowedPattern = "[\\w\\sàâäéèêëîïôöùûüçÀÂÄÉÈÊËÎÏÔÖÙÛÜÇ0-9]*";

  readonly isKeywordInvalid = computed(() => {
    const value = this.keyword();
    return value.length > 0 && !new RegExp(this.allowedPattern).test(value);
  });

  emitSearch() {
    if (this.isKeywordInvalid()) return;
    this.onSearchEvent.emit({ keyWords: this.keyword() });
  }

  reset() {
    this.keyword.set('');
    this.onResetEvent.emit();
  }

  onSortChange(sort: SearchSortModel) {
    this.onSortChangeEvent.emit(sort);
  }
}

<transfers-search
  [loading]="loadingTransfers"
  [searchSortOptions]="searchSortOptions"
  [searchSortModel]="searchSortModel"
  (onSearchEvent)="onSearch($event)"
  (onResetEvent)="onReset()"
  (onSortChangeEvent)="onSortChange($event)">
</transfers-search>
